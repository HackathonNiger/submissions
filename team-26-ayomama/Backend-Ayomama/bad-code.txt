// import opencage from "opencage-api-client";
// import axios from "axios";

// export const getNearbyHospitals = async (req, res) => {
//   try {
//     const { latitude, longitude, radius = 2000 } = req.body;

//     if (!latitude || !longitude) {
//       return res.status(400).json({
//         success: false,
//         message: "Missing coordinates",
//       });
//     }

//     // Reverse geocode the user's location (optional, just to show where user is)
//     const userGeo = await opencage.geocode({
//       q: `${latitude},${longitude}`,
//       key: process.env.OPENCAGE_API_KEY,
//     });

//     const userAddress = userGeo?.results?.[0]?.formatted || "Unknown location";

//     // Query Overpass for nearby hospitals
//     const overpassQuery = `
//       [out:json];
//       node["amenity"="hospital"](around:${radius},${latitude},${longitude});
//       out;
//     `;
//     const overpassUrl = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(
//       overpassQuery
//     )}`;
//     const response = await axios.get(overpassUrl);

//     let hospitals = await Promise.all(
//       response.data.elements.map(async (e) => {
//         let formattedAddress = "Address not available";

//         try {
//           const geoRes = await opencage.geocode({
//             q: `${e.lat},${e.lon}`,
//             key: process.env.OPENCAGE_API_KEY,
//           });
//           formattedAddress =
//             geoRes?.results?.[0]?.formatted || formattedAddress;
//         } catch (geoErr) {
//           console.error(`Failed to geocode hospital ${e.id}`, geoErr.message);
//         }

//         return {
//           id: e.id,
//           name: e.tags?.name || "Unnamed Hospital",
//           lat: e.lat,
//           lon: e.lon,
//           address: formattedAddress,
//           // phone: e.tags?.phone || "Phone not available",
//           // website: e.tags?.website || "Website not available",
//           tags: e.tags || {},
//         };
//       })
//     );

//     res.status(200).json({
//       success: true,
//       message: "Nearby hospitals fetched successfully",
//       userLocation: userAddress,
//       totalHospitals: hospitals.length,
//       data: hospitals,
//     });
//   } catch (err) {
//     console.error("Hospital error:", err);
//     if (!res.headersSent) {
//       res.status(500).json({ error: err.message });
//     }
//   }
// };

// import opencage from "opencage-api-client";
// import axios from "axios";

// export const getNearbyHospitals = async (req, res) => {
//   try {
//     const userId = req.user._id;
//     const { latitude, longitude, radius = 2000 } = req.body;

//     if (!latitude || !longitude) {
//       return res.status(400).json({
//         success: false,
//         message: "Missing coordinates",
//       });
//     }

//     // 1. Reverse geocode with OpenCage
//     const geo = await opencage.geocode({
//       q: `${latitude},${longitude}`,
//       key: process.env.OPENCAGE_API_KEY,
//     });

//     const address = geo?.results?.[0]?.formatted || "Unknown location";

//     // 2. Query Overpass API for nearby hospitals
//     const overpassQuery = `
//       [out:json];
//       node["amenity"="hospital"](around:${radius},${latitude},${longitude});
//       out;
//     `;

//     const overpassUrl = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(
//       overpassQuery
//     )}`;

//     const response = await axios.get(overpassUrl);
//     const data = response.data;

//     console.log("data:", data);

//     const hospitals = data.elements.map((e) => ({
//       id: e.id,
//       name: e.tags?.name || "Unnamed Hospital",
//       lat: e.lat,
//       lon: e.lon,
//       address: e.tags?.["addr:full"] || "Address not available",
//       phone: e.tags?.phone || "Phone not available",
//       website: e.tags?.website || "Website not available",
//       tags: e.tags || {},
//     }));

//     res.status(200).json({
//       success: true,
//       message: "Nearby hospitals fetched successfully",
//       data: hospitals,
//     });
//   } catch (err) {
//     console.error("Hospital error:", err);
//     if (!res.headersSent) {
//       res.status(500).json({ error: err.message });
//     }
//   }
// };




Groq

// import Chat from "../models/chat.js";
// import Groq from "groq-sdk";

// const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

// export const chatWithBot = async (req, res) => {
//   const { message, language } = req.body;
//   const userId = req.user._id;

//   try {
//     // Find chat history
//     let chat = await Chat.findOne({ userId });
//     if (!chat) {
//       chat = new Chat({ userId, messages: [] });
//     }

//     // Add user message
//     chat.messages.push({ role: "user", content: message });
//     await chat.save();

//     // Prepare context (last 5 messages)
//     const contextMessages = chat.messages.slice(-5);

//     // System instruction
//     const systemMessage = {
//       role: "system",
//       content: `You are a warm maternal health assistant. Reply in ${language}. Be supportive and culturally sensitive.`
//     };

//     // Call Groq
//     const completion = await groq.chat.completions.create({
//       model: "llama-3.1-70b-versatile", // or smaller if you want speed
//       messages: [systemMessage, ...contextMessages]
//     });

//     const reply = completion.choices[0].message.content;

//     // Save bot response
//     chat.messages.push({ role: "assistant", content: reply });
//     await chat.save();

//     res.json({ reply });
//   } catch (err) {
//     console.error("Chatbot error:", err.message);
//     res.status(500).json({ error: "Failed to process message" });
//   }
// };

    // System prompt for maternal health safety + personalized name
    // const systemPrompt = {
    //   role: "system",
    //   content: `You are Favour, the official AI Assistant of Ayomama.
    //   - Your personality traits - (Friendly, Fun, Supportive, Empathetic, Knowledgeable, Caring (Pre and Post pregnancy), Patient, Non-judgmental, Culturally sensitive, Humorous, Confident, Help expecting mothers feel good and less panicky about maternal health issues) - NEVER INCLUDE THESE TRAITS IN YOUR RESPONSE ⚠️.
    //   - Always address the user by their name (${userName}).
    //   - Always be fun and supportive while providing clear, supportive guidance on pregnancy, childbirth, newborn care, and maternal wellbeing.
    //   - Always remind users you are not a DOCTOR!!!! (⚠️).
    //   - Encourage professional medical attention when symptoms are severe or unclear.
    //   - Keep responses concise, super friendly, culturally sensitive, and supportive.
    //   - You always ask about (${userName}'s) emotional wellbeing and mental health. If they feel any weirdness or some sort of discomfort with their pregnancy`,
    // };
